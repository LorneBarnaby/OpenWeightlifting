// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event": {
            "post": {
                "description": "Requires a case-sensitive event name to be passed to it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST Requests"
                ],
                "summary": "Pull a specific event by name",
                "parameters": [
                    {
                        "description": "name",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/structs.Entry"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/history": {
            "post": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST Requests"
                ],
                "summary": "how to use the lifter history endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.LifterHistory"
                        }
                    }
                }
            }
        },
        "/leaderboard": {
            "post": {
                "description": "This is the used on the index page of the website and pulls the highest single lift for a lifter within the selected filter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST Requests"
                ],
                "summary": "Main table on the index page",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "start",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "stop",
                        "name": "stop",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sortby",
                        "name": "sortby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "federation",
                        "name": "federation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "weightclass",
                        "name": "weightclass",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "startdate",
                        "name": "startdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "enddate",
                        "name": "enddate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.LeaderboardResponse"
                        }
                    }
                }
            }
        },
        "/lifter": {
            "post": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST Requests"
                ],
                "summary": "how to use the lifter record endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ChartData"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GET Requests"
                ],
                "summary": "how to use the name search endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.NameSearchResults"
                        }
                    }
                }
            }
        },
        "/time": {
            "get": {
                "description": "Returns the current server time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utilities and Testing"
                ],
                "summary": "Checking the servers localtime",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ContainerTime"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "structs.ChartData": {
            "type": "object",
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.ChartSubData"
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "structs.ChartSubData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "structs.ContainerTime": {
            "type": "object",
            "properties": {
                "hour": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "sec": {
                    "type": "integer"
                }
            }
        },
        "structs.Entry": {
            "type": "object",
            "properties": {
                "best_cj": {
                    "type": "number"
                },
                "best_snatch": {
                    "type": "number"
                },
                "bodyweight": {
                    "type": "number"
                },
                "cj_1": {
                    "type": "number"
                },
                "cj_2": {
                    "type": "number"
                },
                "cj_3": {
                    "type": "number"
                },
                "country": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "event": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "instagram": {
                    "type": "string"
                },
                "lifter_name": {
                    "type": "string"
                },
                "sinclair": {
                    "type": "number"
                },
                "snatch_1": {
                    "type": "number"
                },
                "snatch_2": {
                    "type": "number"
                },
                "snatch_3": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "structs.LeaderboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Entry"
                    }
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "structs.LifterHistory": {
            "type": "object",
            "properties": {
                "graph": {
                    "$ref": "#/definitions/structs.ChartData"
                },
                "lifts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Entry"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "structs.NameSearchResults": {
            "type": "object",
            "properties": {
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
